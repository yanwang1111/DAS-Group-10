library(tidyverse)
library(ggplot2)
library(lmtest)
data <- read.csv("dataset10.csv")
data <- read.csv("dataset10.csv")
data1 <- na.omit(data)
ggplot(data1, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Rating", x = "Rating", y = "Count")
library(tidyverse)
library(ggplot2)
library(lmtest)
data <- read.csv("dataset10.csv")
str(data)
summary(data)
data1 <- na.omit(data)
ggplot(data1, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Rating", x = "Rating", y = "Count")
genre_count <- data %>%
separate_rows(genre, sep = "\\|") %>%
count(genre, sort = TRUE) %>%
head(10)
ggplot(genre_count, aes(x = reorder(genre, n), y = n)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Top 10 Most Common Movie Genres", x = "Genre", y = "Count")
movies_per_year <- data %>%
group_by(year) %>%
summarize(count = n())
ggplot(movies_per_year, aes(x = year, y = count)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Number of Movies Released Per Year", x = "Year", y = "Count")
data1$rating_binary <- ifelse(data1$rating >= 7, 1, 0)
ggplot(data1, aes(x = factor(rating_binary), fill = factor(rating_binary))) +
geom_bar() +
theme_minimal() +
labs(title = "Distribution of Binary Rating", x = "Binary Rating", y = "Count")
#x-min/max-min standard methods
min_max_norm=function(x){
return((x-min(x))/(max(x)-min(x)))
}
#standardize
data1[,2:5]=lapply(data1[,2:5],min_max_norm)
data1$genre_num <- as.factor(data1$genre)
model1 <- lm(rating ~ length + budget + votes + genre_num, data = data1)
summary(model1)
ggplot(data1, aes(x = model1$fitted.values, y = model1$residuals)) +
geom_point(color = "blue", alpha = 0.6) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residual Plot of Linear Model", x = "Fitted Values", y = "Residuals")
model2 <- glm(rating_binary ~ year + length + budget + votes + genre_num, data = data1, family = binomial)
summary(model2)
model3<-glm(rating_binary ~ length + budget + votes + genre_num, data = data1, family = binomial)
summary(model3)
AIC(model2, model3)
BIC(model2, model3)
# Function to plot residuals
plot_residuals <- function(model, model_name) {
residuals_data <- data.frame(
Fitted_Values = fitted(model),
Pearson_Residuals = residuals(model, type = "pearson"),
Deviance_Residuals = residuals(model, type = "deviance")
)
# Pearson Residuals Plot
p1 <- ggplot(residuals_data, aes(x = Fitted_Values, y = Pearson_Residuals)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = paste("Pearson Residuals -", model_name), x = "Fitted Values", y = "Pearson Residuals") +
theme_minimal()
# QQ Plot of Deviance Residuals
p2 <- ggplot(residuals_data, aes(sample = Deviance_Residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = paste("QQ Plot of Deviance Residuals -", model_name)) +
theme_minimal()
print(p1)
print(p2)
}
# Generate residual plots for Model 1, 2, and 3
plot_residuals(model1, "Model 1")
plot_residuals(model2, "Model 2")
plot_residuals(model3, "Model 3")
